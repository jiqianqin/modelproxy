{"version":3,"sources":["webpack:///webpack/bootstrap 26c8760388184ce728b4","webpack:///./src/index.ts","webpack:///./src/libs/engine.factory.ts","webpack:///./src/libs/base.factory.ts","webpack:///./src/libs/modelproxy.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,+CAAsD;AACtD,2CAA+C;;AAE/C,mBAAe;KACX,UAAU,EAAE,uBAAU;KACtB,aAAa,EAAE,8BAAa;EAC/B,CAAC;;;;;;;;ACLF,6CAA6C;AAEhC,sBAAa,GAAG,IAAI,0BAAW,EAAW,CAAC;AAExD,QAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;;;;;;;ACFf;KAGI;SAFQ,aAAQ,GAAyB,EAAE,CAAC;KAE5B,CAAC;KAQjB,yBAAG,GAAH,UAAI,IAAY,EAAE,OAAU,EAAE,QAAyB;SAAzB,2CAAyB;SACnD,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACjD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,wCAAa,IAAI,6BAAW,CAAC,CAAC;SACvD,CAAC;SAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;KAClC,CAAC;KAMD,yBAAG,GAAH,UAAI,IAAY;SACZ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACtC,MAAM,IAAI,KAAK,CAAC,kCAAY,IAAI,6BAAW,CAAC,CAAC;SACjD,CAAC;SAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC/B,CAAC;KACL,kBAAC;AAAD,EAAC;AA9BY,mCAAW;;;;;;;;ACCxB;KAGI;SAFQ,eAAU,GAAoD,EAAE,CAAC;KAEzD,CAAC;KAEjB,mCAAc,GAAd,UAAe,IAAI;KAEnB,CAAC;KAED,+BAAU,GAAV,UAAW,MAAM;SACb,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACxB,CAAC;KACL,iBAAC;AAAD,EAAC;AAZY,iCAAU","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 26c8760388184ce728b4","import { engineFactory } from \"./libs/engine.factory\";\nimport { ModelProxy } from \"./libs/modelproxy\";\n\nexport default {\n    ModelProxy: ModelProxy,\n    engineFactory: engineFactory\n};\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import { IEngine } from \"../models/engine\";\nimport { BaseFactory } from \"./base.factory\";\n\nexport const engineFactory = new BaseFactory<IEngine>();\n\nconsole.log(2);\n\n\n// WEBPACK FOOTER //\n// ./src/libs/engine.factory.ts","/**\n * 实例的工厂类\n */\nexport class BaseFactory<T> {\n    private intances: { [id: string]: T; } = {};\n\n    constructor() { }\n    /**\n     * 添加一个实例\n     * @params name     {string}    实例的名称\n     * @params engine   {IEngine}   实例\n     * @params override {boolean}   是否覆盖\n     * @return {void}\n     */\n    add(name: string, intance: T, override: boolean = false): void {\n        if (override && this.intances.hasOwnProperty(name)) {\n            return console.error(`已经存在name=【${name}】的engine！`);\n        }\n\n        this.intances[name] = intance;\n    }\n    /**\n    * 取出一个实例\n    * @params name     {string}    实例的名称\n    * @return {IEngine}\n    */\n    use(name: string): T {\n        if (!this.intances.hasOwnProperty(name)) {\n            throw new Error(`不存在name=【${name}】的engine！`);\n        }\n\n        return this.intances[name];\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/base.factory.ts","import { engineFactory } from \"./engine.factory\";\nimport { IInterfaceModel } from \"../models/interface\";\nimport { BaseFactory } from \"./base.factory\";\n\nexport class ModelProxy {\n    private interfaces: { [id: string]: BaseFactory<IInterfaceModel>; } = {};\n\n    constructor() { }\n\n    loadConfigUrls(urls) {\n\n    }\n\n    loadConfig(config) {\n        console.log(config);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/libs/modelproxy.ts"],"sourceRoot":""}